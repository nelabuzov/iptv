const fs = require("fs");
const https = require("https");
const { exec } = require("child_process");
const util = require("util");

const execPromise = util.promisify(exec);

const PLAYLIST_URL = "https://iptv-org.github.io/iptv/index.m3u";
const OUTPUT_FILE = "data/channels.json";
const BATCH_SIZE = 20;

// –°–∫–∞—á–∏–≤–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
function fetchPlaylist(url) {
  return new Promise((resolve, reject) => {
    let data = "";
    https.get(url, (res) => {
      res.on("data", chunk => data += chunk);
      res.on("end", () => resolve(data));
    }).on("error", reject);
  });
}

// –ü–∞—Ä—Å–∏–º M3U, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ tvg-id
function parseM3U(text) {
  const lines = text.split(/\r?\n/);
  const channels = [];
  let currentName = "";
  let currentTvgId = "";
  let currentLogo = "";
  let currentGroup = "";

  for (const line of lines) {
    if (line.startsWith("#EXTINF")) {
      // –ù–∞–∑–≤–∞–Ω–∏–µ
      currentName = line.split(",").slice(1).join(",").trim();
      if (currentName.includes("Gecko")) {
        currentName = currentName.split(",").pop().trim(); // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
      }
      // —É–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      currentName = currentName.replace(/\(.*?\)/g, "").trim();
      // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
      currentName = currentName.replace(/\s+/g, " ");

      // tvg-id
      const mId = line.match(/tvg-id="([^"]*)"/i);
      currentTvgId = mId ? mId[1] : "";

      // tvg-logo
      const mLogo = line.match(/tvg-logo="([^"]*)"/i);
      currentLogo = mLogo ? mLogo[1] : "";

      // group-title
      const mGroup = line.match(/group-title="([^"]*)"/i);
      currentGroup = mGroup ? mGroup[1] : "";
    } else if (line.startsWith("http") && currentName && currentTvgId) {
      channels.push({
        name: currentName,
        tvgId: currentTvgId,
        url: line.trim(),
        tvgLogo: currentLogo,
        groupTitle: currentGroup
      });
      currentName = "";
      currentTvgId = "";
      currentLogo = "";
      currentGroup = "";
    }
  }
  return channels;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ ffmpeg
async function checkStream(ch) {
  try {
	await execPromise(
	  `ffmpeg -v error -stimeout 5000000 -i "${ch.url}" -c copy -t 1 -f null -`,
	  { timeout: 15000, maxBuffer: 10 * 1024 } // 15 —Å–µ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
	);
    ch.working = true;
    console.log(`‚úÖ ${ch.name}`);
  } catch (err) {
    const msg = (err.stderr || err.message || "").trim();
    let shortMsg = "";
    if (!msg || !/(Error opening input|Forbidden|Not Found)/i.test(msg)) {
      ch.working = true;
      console.log(`‚úÖ ${ch.name}`);
    } else {
      // —É–±–∏—Ä–∞–µ–º "Error opening input files:" –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
      shortMsg = msg.split("\n").pop().replace(/.*Error opening input files:\s*/, "").trim();
      ch.working = false;
      console.log(`‚ùå ${ch.name} {${shortMsg}}`);
    }
  }
  return ch;
}

// –ü–∞–∫–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –ª–∏–º–∏—Ç–æ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
async function checkAll(channels) {
  const results = [];
  let checkedCount = 0;

  for (let i = 0; i < channels.length; i += BATCH_SIZE) {
    const batch = channels.slice(i, i + BATCH_SIZE);

    // –∑–∞–ø—É—Å–∫–∞–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
    const checked = [];
    for (let j = 0; j < batch.length; j += 5) {
      const smallBatch = batch.slice(j, j + 5);
      const res = await Promise.all(smallBatch.map(ch => checkStream(ch)));
      checked.push(...res);
    }

    results.push(...checked);
    checkedCount += batch.length;
    console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${checkedCount}/${channels.length}`);
  }

  return results;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
(async () => {
  console.log("üì• –ó–∞–≥—Ä—É–∂–∞—é –ø–ª–µ–π–ª–∏—Å—Ç...");
  const m3uText = await fetchPlaylist(PLAYLIST_URL);
  const channels = parseM3U(m3uText);
  console.log(`üì∫ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ —Å tvg-id: ${channels.length}`);

  const results = await checkAll(channels);

  fs.mkdirSync("data", { recursive: true });
  fs.writeFileSync(OUTPUT_FILE, JSON.stringify(results, null, 2));
  console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${OUTPUT_FILE}`);
})();
